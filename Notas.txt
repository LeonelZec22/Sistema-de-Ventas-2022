CornerRadius redondea las esquinas de la pantalla utilizando el paquete de iconos

Selecciona el objeto tipo window en apariencia pones allow transparent para tener la pantalla completa

Despues en windostartup lo pones en center

Cambiamos el color del windows 

Agregamos un rectangulo a este solo cambiamos su tamaño y sus bordes dejando solo una franja del windows

Creamos una figula con un rectangulo que girado es un rombo y en medio un circulo de otro color 

Content="Ver lista de &#xa; productos" -> para el salto de línea

 <Icon:PackIconMaterial Kind="Prod" Style="{StaticResource menuButtonIcon}"/>

  ------------------Formulario Principal-----------

 Nombre: FrmPrincipal

 StartPosition: CenterScreen 

 Text: Sistemas de ventas - 

 Windows State: Maximized 

 Nos falta la opción del XAML Dinamico al maximizar (Maximized) y nos falta los botones de cerrar, minimizar y maximizar

 private sqlconnection Conexion = new sqlconnection(configurationManager.ConnectionStrings["Conexion_DB"].ConnectionString);

  ------------------Conexion a la base de datos-----------

  Solo hemos modificado el archivo app.confi y creado la clase cd_conexion aunque en el archivo app.config da problemas y lo movimos todo a la clase creada

  En la clase CD_conexion es donde tu vas a agregar la conexion a la base de datos con autenticación de windows en el momento que está lista para 
  hacer el instalador vas a la empresa instalas el sql server y cambias la conexión haciendo un nuevo instalador

 Utilizamos la clase CD_Conexion para seguir con la conexión a la base de datos 

   ------------------Clase procedimientos en la capa datos -----------
   
   Solo creamos la clase cd_procedimientos.cs

    Donde creo cada uno de los métodos / funciones que me van a facilitar la programación como el método cargar datos para utilizarlo en cualquier formulario en un datagridview 

   Vamos a crear un método que me permite cargar los datos de una tabla a un datagridview

   donde pasare como parametro el nombre de la tabla 


   Métodos creado:

   - Cargar datos a la tabla
   - Cambiar el color de la fila 
   - Generar los códigos 
   - Generar los códigos de ID
   - Darle formato moneda
   - Limpiar controles
   - Llenar ComboBox


       ------------------Formulario Base y Formulario Productos-----------
   
   Seguiremos agregando métodos / funciones a la clase procedimiento pero ahora en la capa negocio (CDo_Procedimientos)
   Trabajaremos el formulario Productos para cargar nuestra tabla 

   Mandamos a llamar a cada uno de los métodos en un objeto nuevo para ser utilizados

 1) Agregamos un bóton cancelar con icono en la parte inferior derecha 

    x:Name="EditCancelarBtn"

 2)	En FormEditBase está el boton a copiar porque tiene el método clic para cerrar la pantalla y otros métodos virtuales
	Ahí está un método close que lo vamos a utilizar
	y otros métodos publicos virtuales que vamos a utilizar 

 3) Agregamos el formulario productos llamado FrmProductos 

 4)	Agregamoss el DataGrid 

 5) Agregamos estas propiedades al estilo de la tabla en el app.xaml 

	 <Setter Property="CanUserAddRows" Value="False"/>

	 <Setter Property="CanUserDeleteRows" Value="False"/>

	 <Setter Property="CanUserReorderColumns" Value="False"/>

	 <Setter Property="CanUserResizeRows" Value="False"/>

	 <Setter Property="CanUserResizeColumns" Value="True"/>

	 En el estilo del column header solo cambias el color de texto y el fondo ademas el tamaño de letra
	 en el estilo de la celda solo el tamaño de letra
	  
	Agrego el Read Only en true

 6)	Creamos el método para mostrar datos en la tabla 

	Tengo que cambiar los botones del menu lateral por otros y cambiar el ancho de la pantalla para hacerlos más grande y desactivar que se pueda mover 
	ademas de minimizar y cerrar además conectarlo con otras pantallas y tambien tenemos que ver como hacer datagrid ui más estilizado

	Importamos la capa negocio y la capa entidad 

	No vamos a utilizar las clases procedimientos solo vamos a copiar ese código cuando lo necesitemos

	hemos creado el método cargaDatos y en la pantalla principal al hacer clic en productos se abre el formulario de productos

	Creamos un objeto de la clase CDo_Procedimiento para utilizar el método cargar datos 

	CDo_Procedimientos Procedimientos = new CDo_Procedimientos();

	DataGrid.DataSource = Procedimientos.CargarDatos("Productos")

7) Conectamos la pantalla principal con la pantalla productos 

	 ------------------Formulario Inventario-----------

	 Los formularios de editar y agregar no deben de maximizarse 

	 Tenemos que ocultar la columna id cuando es un datagrid con columnas dinamicas

	 Creamos el formulario principal de inventarios

	 Me llevo todo del formulario Productos

	 Cambiamos los nombres del x:name de los elementos y eliminamos los botones porque solo necesitamos mostrar los datos en la tabla

	 que no se te olvide agregarle este evento: Border_MouseLeftButtonDown

	 Una vez teniendo ya el formulario de inventario terminados pasamos al código

	 en el código me robo todas las referencias o librerias de la clase productos a la clase inventario

	 me llevo el método carga datos cambiamos el nombre de la tabla de productos a inventario y cambios el nombre del datagrid por el de inventario

	 procedemos a conectar la pantalla principal del sistema con la pantalla de inventario


	 ------------------Formulario Agregar Producto-----------
	 
	 Al textBox de monto total del inventario le quitamos el isEnabled para que sea solo de lectura y no se pueda escribir en él
	 además hemos hechos modificaciones al buscador que está en inventario y en productos

	 Creamos un método para calcular el monto total del inventario es decir sumamos toda la columna de monto total

	 Ocultamos un columna auto generica con el evento AutoGeneratingColumn asi ocultamos la columna ID esto en el formulario inventario y de productos

	 Vamos a la capa entidad y creamos la clase CE_Productos

	 Creamos los atributos que corresponde a los campos de la tabla productos 
	 Creamos los métodos get y set de esos campos 

	 En la capa datos creamos la clase CD_Productos en esa clase es que vamos a crear el método para agregar un producto a la base de datos

	 como parametro creo una instancia de la clase CE_Productos

	 Creamos los métodos agregar, editar y eliminar productos 

	 En la capa de negocios creamos la clase CDo_Productos en está clase creamos más métodos para agregar, editar y eliminar

	 Agregamos nuestro formulario - Agregar productos 

	 Copiamos todo lo de formulario Agregar Base copiamos ese código

	 Ya lo tenemos ahora los vamos a modificar un poquito para definir los campos recuerda quitar el evento mousedown heredado

	 Para cada pantalla editar, agregar y eliminar si podriamos cambiar el color y los iconos 

	 Agregamos el método close al boton cancelar del formulario agregar productos 

	Creamos una instancia de la pantalla productos desde el formulario agrega productos para cuando se agregue un producto  se actualice el datagrid 

	Creamos un evento para poder refrescar la pantalla de productos una vez agregamos un productos desde la pantalla agregar productos

	En la caja texto de código activamos el readonly y la desactivamos

	los textbox tienen el evento keydown y el evento leave 

	Evento para cambiar al siguiente textbox presionando la tecla enter usando el evento keydown

	tuvimos que agregar la referencia de PresentationFramework a la capa de datos para despues poder cambiar el parametro del método formato moneda de 
	form.textbox a controls.textbox pero como es una referencia ambigueda queda de la siguiente forma System.Windows.Controls.TextBox 

	entonces en las 4 capas tiene que estar la referencia a la presentationframework después en los métodos hay que poner la ruta completa del control como
	parametro porque si no surge el problema de ambiguedad que es que no sabe visual studio si es un textbox de tipo form o de tipo control y eso lo cambias en todos los métodos para que espere recibir un textbox de tipo control (wpf) y no uno de tipo form (winform)

	Ahora agregamos el método virtual agregar

	 ------------------ Correciones del menu lateral del Formulario Agregar Producto-----------

	 Creamos un control de usuario llamado Modulos en la carpeta Menu

	 Despues Pegas el estilo de menu lateral en el App.xaml 

	 Despues abrimos la clase de Modulos.cs para pegar los métodos

	 Despues abrimos el modulo.xaml para crear los elementos 

	 Ahora compilamos la solución

	 Creamos los elementos en el Productos.xaml

	 Resumen solo Creamos el control de usuarios, agregamos más imagenes, agregamos más estilos al App.xaml, modificamos la pantalla de productos principal

	 Ahora copiamos esa parte en el Invertario.xaml

	 No se te olvide agregar la referencia xmlns:uc="clr-namespace:CapaPresentacion.Menu"

	 Ahora en la pantalla de Productos y de Inventario tenemos que agregar el evento clic para conectar las pantallas

	  <Button Grid.Column="1" Background="Transparent" Style="{StaticResource BotonesMenu}"> </Button>

	   ------------------  (Formulario Editar Producto) -----------

	 Creamos una nueva pantalla llamada FrmEditarProducto

	 Ahora reutilizamos el código

	  Agregar el evento selection changed en el datagrid 


	   ------------------  (Eliminar Producto) -----------

	   Nos vamos a CD_Productos

	   Ceeamoes el metodo eliminar que despues mandamos llamar a en el formulario productos

	   Ahora nos vamos al formulario productos 

	   El inventario no lo actualiza cuando le doy a editar producto ni lo elimina cuando elimino un producto desde productos hay algo mal con los triggers
	   pero como ese modulo no toca esta semana pues lo vemos más adelante 

	   hay un problema con el id producto y inventario fijate que cuando lo agregas

	   cuando lo vas a agregar no pones el id ni como parametro @ ni dentro de insert into porque eso ya se agrega automaticamente cuando es identity

	   cuando vas a editar el producto si pones el parametro id pero vas usarlo dentro del where Id_Producto=@Id_Producto;

	   
	   La solución agregar el campo id_producto a la tabla inventario y dejar de hacer cosas raras 

	   si agregamos esa columna eliminanos el id_inventario de los trigger y lo cambiamos por @Id_Productos 

	   creas otras base de datos y puebas estos cambios



	    ------------------ Buscar productos por Código, Nombre y Descripción   ------------------

		Abrimos CD_Productos

		Creamos los métodos para buscar productos

		Abrimos la capa negocios y abrimos la clase cdo_productos

		Creamos los métodos buscar

		podemos usar el evento clic o el evento textchanged 

		------------------------------ Gestión de Proveedores -----------------------------------

		Vamos a la capa entidad y creamos la clase CE_Proveedores

		Creamos los método get y set de todos los campos que conforman la tabla proveedores

		Nos vamos a la capa datos y creamos una clase llamada CD_Proveedores
		Pegamos todo el código de la clase CD_Productos en la clase CD_Proveedores y modificamos las referencias 
		
		Vamos a la capa de negocio y creamos la clase CDo_Proveedores

		Vamos a crear el formulario de proveedores 

		Como siempre agregamos las referencias del formulario productos al de proveedores

		Copio el codigo y renombro los elementos x:name 

		Ahora agrego el método cargadatos y cambio la tabla de productos a proveedores

		Agrego el Evento para ocultar una columna id de un datagrid autogenerico

		------------------------------ Agregar Proveedor ------------------------------

		Creamos un nuevo formulario 

		Copiamos el código del formulario AgregarProductos 

		Cambiamos los nombres de xname y los eventos

		Puedes cambiar los colores y el icono

		Agregamos las referencias 

		Copiamos los métodos del formulario Agregar Producto

		Nos falta validar con Expresiones regulares regex el campo de telefono y bloquear las teclas de texto para que solo pueda escribir numeros 


		
		------------------------------ Editar Proveedor ------------------------------

		Agregamos un nuevo formulario

		Copiamos el código de AgregarProveedor al editarproveedor cambiamos los nombre x:name 

		Agregamos el textbox para el id pero de manera oculta 

		Ahora en la clase EditarProveedor creamos el método para editar el proveedor

		Ahora seguimos con la clase del formulario Proveedor


		------------------------------ Gestión de Clientes ------------------------------

		Creamos la clase CE_Clientes en la capa entidad

		Creamos las variables o atributos de la clase en base a las columnas de la tabla cliente

		Id_Cliente

		Codigo

		Nombre

		Telefono

		Email

		Estado

		Creamos la clase CD_Clientes en la capa datos

		Abrimos la clase CD_Proveedores

		Copiamos las librerias

		Copiamos todo el codigo 

		Sustituimos los nombres 

		Creamos la clase CDo_Clientes en la capa negocio

		Copiamos las librerias de de CDo_Proveedor

		Copiamos el codigo de CDo_Proveedor

		Sustituimos los nombres de los métodos y las variables

		Agregamos una nueva pantalla llamada FrmClientes

		Abrimos el formulario principal de proveedores 

		Copiamos sus librerias y las pegamos en FrmClientes

		Copiamos todo el código 

		Renombramos los elementos

		Abrimos la clase de ese formulario clientes

		Abrimos la clase del formulario proveedores

		Copiamos las librerias del formulario proveedor

		Copiamos el código y modificamos los nombres


		------------------------------ Agregar Clientes ------------------------------

		Creamos el formulario Agregar Cliente

		Copias el codigo de Agregar Proveedores

		Ahora abre la clase de Agregar Proveedore

		Abre la clase de Agregar Clientes

		Tenemos que hacer una modificación en la base de datos en el campo nombre y que acepte 20 caracteres

		Usar expresiones regulares para que el campo nombre tiene que ir como minimo 1 nombre y 1 apellido es decir 10 caracteres
		Expresiones regulares para telefono y email

		Activo -> Reserva activa o paquete activo cuando se haya cumplido la reserva pasa a inactivo o cumplido todo el paquete

		------------------------------ Editar Clientes ------------------------------

		Creamos el formulario editar 

		Abrimos el formulario Agregar Cliente

		Copiamos el código 
		
		Modificamos los nombres

		Vamos a editar proveedores y copiamos la caja editar id

		Abrimos la clase agregar clientes 
		
		Copiamos una parte del código y modificamos los nombres en la clase editar clientes

		Abrimos la clase de proveedores 

		Abrimos la pantalla de clientes

		Abrimos la clase de clientes

		------------------------------ Eliminar Clientes ------------------------------


		Abrimos el fomulario de clientes 

		Abrimos la clase del formulario

		Abrimos la clase del formulario proveedor 

		Copiamos el método eliminar

		------------------------------ Buscador de Clientes ------------------------------


		Abrimos el formulario de proveedor 
		
		Abrimos la clase de proveedores 

		Copiamos el método buscar

		Cambiamos los nombres

		------------------------------ Clases del Modulo Gestión de Compras ------------------------------
		
		En la capa entidad creo la clase CE_Ingreso_Productos

		Creamos los atributos y los métodos get y set

		En la capa entidad creo la clase CE_Detalle_Ingreso

		Creamos los atributos y los métodos get y set

		En la capa datos creo la clase CD_Ingreso_Productos

		Creamos los métodos para agregar el ingreso de un producto
		Creamos los métodos para anular o cancelar el ingreso de un producto
		Creamos los métodos para mostrar el ingreso de un producto en una tabla

		En la capa datos creo la clase CD_Detalle_Ingreso

		Más que imprimir una factura podemos imprimir un resumen o exportar a excel un resumen de todo los productos ingresados que hay actualmente 

		Creamos los métodos para agregar el ingreso del detalle de un producto
		Creamos los métodos para anular o cancelar el ingreso del detalle de un producto

		En la capa negocios creo la clase CDo_Ingreso_Productos

		En la capa negocios creo la clase CDo_Detalle_Ingreso

		------------------------------ Formulario Compras y Vista Proveedores ------------------------------

		Creamos una nueva pantalla FrmCompraDeProducto porque cada vez nosotros recibimos un producto que hemos comprado hay que registrarlo 
		para tener un informe de este día se compro este producto o se recibio este producto 

		Abrimos el formulario de Clientes y copiamos sus referencias en CompraDeProducto porque para crear el método cargaDatos vamos a hacer algo a BuscarClientes 
		donde "  DataGridClientes.ItemsSource = Clientes.Buscar_Cliente_Codigo(Cliente).AsDataView(); " se sustituye los nombres 

		Utilizamos el evento para ocultar el nombre de una columna

		Creamos una nueva pantalla FrmVistaProveedores 

		Abrimos el formulario Proveedores 

		Copiamos el formulario y lo pegamos en VistaProveedores

		Abrimos la clase del formulario proveedores

		Copiamos las librerias y las pegamos 

		------------------------------  Formulario Agregar Ingreso Producto ------------------------------ 

		Creamos un formulario

		Despues en la clase de AgregarIngreso agregamos la libreria

		------------------------------ Agregar Ingreso Producto ------------------------------

		Si yo tengo en Editar Proveedores los textBox a llenar 

		Si tengo el datagrid en Proveedores que cuando selecciono una fila después doy clic en editar esos datos de esa fila seleccionada se van a los textbox del
		formulario editar

		Para contar filas int num=dataGrid.Items.Count

		foreach (DataGridViewRow Row in DataGridIngresoProducto.Rows)
        {
                        
			Total += Convert.ToDouble(Row.Cells[6].Value)
                        
        }

		

		el numero de fila (no_fila) es para saber el index de una fila 



		DataGridView.Rows : Es que captura o agarra todas las filas de la tabla y las guarda en una coleccion que es un array editable porque podemos agregar y eliminar 
		filas ademas al ser un array podemos iterar porque si decimos que la fila 1 está en la posición cero y la fila dos en la posición se puede iterar 

		dataGridView1.ColumnCount = 4 -> Declara cuantas columnas tendrá esta tabla de datos 

		dataGridView1.ColumnHeadersVisible = true; -> Declara que los encabezados de las columnas seran visibles

		 dataGridView1.Columns[0].Name = "Recipe"; => Agregamos nombre a las columnas 

		 en vez de usar la posicion de columna utilizamos el bilding 

		 Creamos un array de tipo string para insertar esos datos a una fila nueva de la tabla

		  string[] row1 = new string[] { "Meatloaf", "Main Dish", "ground beef", "**" };

		  Creamos otro array de tipo objecto para insetar los array de tipo string

		  object[] rows = new object[] { row1, row2, row3, row4, row5, row6 };

		  Digamos que el array de tipo objeto es el objeto a iterar 

		  foreach (string[] rowArray in rows)
			{
				dataGridView1.Rows.Add(rowArray);
			}

		DataGridItem -> es una fila 


		------------------------------ ------------------------------ ------------------------------ ------------------------------ ------------------------------ 

		Es mejor hacer una función y llamar la función mediante un boton que meter el código dentro del boton

		Si no se puede terminar de ejecutar el codigo que está dentro del try pues que me mande una exception

		 private void SeleccionarProveedor()
        {
            try
            {
				//Validación que si el formulario abierto
				if(){

				}
            }

            catch (Exception ex)
            {
                System.Windows.Forms.MessageBox.Show("Hubo un Error" + ex, "Seleccionar Proveedor", System.Windows.Forms.MessageBoxButtons.OK, System.Windows.Forms.MessageBoxIcon.Exclamation);
            }
        }


		DataGridView Rows Count es para contar cuantas filas hay en una tabla es para saber ¿Cuantos Datos hay en la tabla? ¿Cuantas filas tiene? 

		int num= dataGrid.Items.Count -> Te permite contar las filas que contiene la tabla 

		Crean el formulario compra y vista proveedor 

		Minuto 6 -> 33/2 -> se trata de abrir el formulario  AgregarIngreso y con el boton buscar abrir el formulario vista proveedores y seleccionar un proveedor 
		y rellenar con esa fila seleccionada los textBox


		------------------------------ ------------------------------ ------------------------------ ------------------------------ ------------------------------ 


		El dialogoresult por defecto es falso y se puede utilizar porque aqui en el formulario agregar ingreso los hemos abierto 

		El usuario puede hacer dos cosas cerrar la ventana por lo cuál el dialogresult queda en falso o puede apretar el boton de agregar 
		entonces se verifica la siguiente validación si la tabla está vacia no podrás seleccionar níngun dato por lo tanto no hara nada el boton y saldrá por el momento el catch pero si hay datos y selecciona un dato entonces 

		 try
            {
                if(VistaProveedor.DialogResult == true)
                {

                }
            }

			DataGridView Rows estas accediendo a todas las filas de la tabla 

			DataGridViewRowCollection contiene las filas de una tabla 

			DataGridViewRowCollection.Item[Int32]

			Obtiene la fila de la tabla en el indice especificado 

			Obtener la fila en el indice especificado wpf


			DataRowView.Row -> Obtiene la fila de datos que se está visualizando.

			Primero entro al la fila de la tabla para poder usar esta propiedad

			DataRowView drv

			DataRow row = drv.Row;

			Despues que capturo la fila completa puedo especificar la columna a usar

			Convert.ToString(drv.Row[0])

			  DataGridView.Rows.Add 

		   Agregar una fila a un DataGrid o tabla utilizando la informacion que hay en los textbox 

		   Para acceder a todas las columnas lo hacemos mediante la coleccion Rows / Items 

		    DataGridIngresoProducto.Items.Add -> Agrega una fila a la colección de filas.

			DataTable -> Representa una tabla de datos 

			ItemsControl -> Representa un control que se puede usar para presentar una colección de elementos.

			------------------------------ ------------------------------ ------------------------------ ------------------------------ ------------------------------ 

		Creamos 2 variables una para almacenar el total de todos los productos agregar (suma de una columna) y otra para contar el numero de filas que hay en  la tabla
		esto nos sirve para saber si hay datos o registro ya en la tabla o si está vacia es decir para saber si ya hay productos agregados a la tabla o no hay ningún 
		proudcto agregado a la tabla DataGridIngresoProducto

			
        public static int ContFila = 0; 
        public static decimal Total;  


		Creamos la variable subtotal que nos sirve para sumar el precio unitario por la cantidad del producto a comprar

		decimal SubTotal = 0;

		Creamos una validación con un if para verificar si los textbox están llenos o están vacios en caso que esten vacio que mande una alerta y no se ejecute el método 
		hasta que los textbox tengan contenido

		Creamos una variable para verificar la existencia ¿Hay o no hay? 

		 bool Existe = false;

		  if (ContFila == 0) -> Si no hay registros en la tabla ingresoproductos porque no hay productos agregados a la tabla entonces ejecuta este codigo 

		  en el caso que sea no hay productos en la tabla el subtotal es el precio de multiplicar la cantidad de ese producto por el precio que tenga ese producto

		   SubTotal = Convert.ToDecimal(txtCantidad.Text) * Convert.ToDecimal(txtCosto_Unitario.Text); 


		   Seleccionamos el DataGrid en este caso es el IngresoProducto porque vamos a agregar en esa tabla la información de los textbox para agregar ese primer producto a la tabla 

		 Decimos que vamos a agregar una nueva fila a la tabla por eso usamos el método add de la propiedad items aqui es muy importante los parametros que recibe este método porque si se envia vacio nos agrega una nueva fila pero vacia entonces si recuerdas cuando creamos una columna está tiene el atributo bilding entonces nosotros hacemos referencia a esas columnas usando el nombre del bilding y decimos que el valor de la columna "x" de esa nueva fila va a ser igual a lo que hay en el textbox correspondiente 

		 Ahora si ya datos en la tabla IngresoProducto y por lo tanto el total de filas es mayor a 0 

		 Tenemos que recorrer un DataGrid 

		 DataGridRow paretoRow in paretogrid.Items

		 ------------------------------ ------------------------------ ------------------------------ ------------------------------ ------------------------------ 

		Si los textbox  están lleno entonces valida si es el primer campo a llenar por defecto la variable contfila empieza en cero y solo aumenta su valor si se agrega
		un dato entonces la primera vez si pasara después va a verificar si ya hay una fila creada en la dataTable por defecto no entonces se crea una columna

		Actualizar una columna de una fila wpf

		Tenemos la fila numero 1 y queremos actualizar su columna 3 


		De la tabla productos voy a insertar ciertos datos en la tabla inventario

		Cuando pongo parametros estoy diciendo que datos voy a insertar en la tabla 

		 @Id_Producto=Id_Producto,@Codigo=Codigo,@Nombre=No

		 @Cantidad=0,@Precio_Venta=Precio_Venta,@Costo_Unitario=Costo_Unitario,
		@Monto_Total=(@Cantidad * @Costo_Unitario) 

		solo cantidad y monto total no pertenece a la tabla productos 

		------------------------------ Mostrar Ingreso Producto ------------------------------

		Creamos una carpeta en la capa de presentación


		Id_Producto = 19 -> Detalle Ingreso 

		Cantidad = 2 + 2 = 4 -> Detalle Ingreso 

		SubTotal = 1.20 + 1.20 = 2.40

		Costo_Unitario = 0.60

		------------------------------------------------------

		@Id_Inventario = Id_Producto = 19 -> Detalle Ingreso 

		@Cantidad = Cantidad = 4 -> Detalle Ingreso 

		@Stock_Actual = @Cantidad = 4 -> -> Detalle Ingreso 

		@Costo_Unitario = Costo_Unitario =  0.60 -> Inventario

		@Monto_Total 

		@Balance_Actual = Monto_Total = 2.50 -> Inventario


		Nostros vamos a actualizar la tabla de inventarios entonces decimos que la columna Montototal su nuevo valor saldra
		de calcular 

		@Balance_Actual = MontoTotal = 2.40 -> Inventario

		@Costo_Unitario = Costo_Unitario =  0.60 -> Inventario

		@Cantidad = Cantidad = 2 -> Detalle Ingreso  

		2.40 - (2*0.60) = 2.40 - 1.20 = 1.20

		la columna Cantidad su nuevo valor saldra de calcular 

		@StockActual = @Cantidad = 2 - 2 

		 this.mostrar_Ingreso_ProductosTableAdapter.Fill(this.dB_Sistemas_v2DataSet.Mostrar_Ingreso_Productos, Id_IngresoProducto);
            this.reportViewer1.RefreshReport();

			 private int _Id_IngresoProducto;

        public int Id_IngresoProducto { get => _Id_IngresoProducto; set => _Id_IngresoProducto = value; }



		----------------------------------------------

		Tabla Mostrar_Ingreso -> Frm Compra de Producto

		Frm Agregar Ingreso
		
		Id_IngresoProducto - txtId_IngresoProducto - 0

		Id_Proveedor - txtId_Proveedor -1

		No Ingreso - txtNo_Ingreso - 2

		Proveedor - txtNombre_Proveedor -3 

		Fecha_Ingreso -  dtp_FechaIngreso - 4

		Monto Total - txtTotal_Pago -5 

		Estado - Se agrega por codigo 


		----------------------------------------------

			CREATE TABLE Ventas (
			Id_Venta int identity(1,1) primary key not null,
			Id_Cliente int not null,
			Fecha_Venta date not null,
			Sub_Total decimal (12,2) not null,
			Descuento decimal (12,2),
			Monto_Total decimal(12,2) not null,
			Estado varchar(10),
			Id_Usuario int  )

			CREATE TABLE Detalle_Venta (
			Id_DetalleVenta int identity(1,1) primary key not null,
			Id_Venta int not null,
			Id_Producto int not null,
			Cantidad int not null,
			Precio_Venta decimal(12,2) not null,
			Sub_Total decimal (12,2) not null,
			Descuento decimal (12,2),
			Monto_Total decimal(12,2) not null,)

			CREATE Table Reservas(
			Id_Reservas int identity(1,1) primary key not null,
			Id_Cliente int not null,
			Id_Servicios int not null,
			Fecha_Reserva date not null,
			Estado varchar(10)

			)

			CREATE Table Detalle_Reservas(
			Id_DetalleReserva int identity(1,1) primary key not null,
			Id_Reserva int not null,
			Id_Servicio int not null,
			Cantidad int not null, 
			Cantidad_Disponible int not null,
			Cantidad_Usada int not null,

			)


			Alter PROC MostrarReservas
			as
			SELECT R.Id_Reservas, R.Id_Cliente,C.Nombre, R.Id_Servicios, S.Nombre, V.Fecha_Reserva, R.Estado, 
			FROM Ventas V inner join Clientes C on V.Id_Cliente = C.Id_Cliente
			inner join Usuarios U on V.Id_Usuario=U.Id_Usuario
			GO

			CREATE TABLE Reserva(
			Id_Reserva int identity(1,1) primary key not null,
			Id_Cliente int not null,
			Fecha_Reserva date not null,
			Estado varchar(10),
			Descuento decimal (12,2),
			Monto_Total decimal(12,2) not null
			)

			CREATE TABLE Detalle_Reserva(
				Id_DetalleReserva int identity(1,1) primary key not null,
				Id_Reserva int not null,
				Id_Servicios int not null,
				Descuento decimal (12,2),
				Monto_Total decimal(12,2) not null)

			GO



			----------------------------------------------

			[ Table Venta ]

			txtId_Cliente

			txtClienteNombre

			txtId_Venta

			dtp_FechaVenta

			txtSubTotal

			txtDescuentoVenta

			txtMontoTotal

			Estado -> se escribe por codigo 

			[Table Detalle Venta]

			txtId_Producto

			txtCod_Producto

			txtNombre_Producto

			Cantidad -> se escribe manual

			txtStockActual

			txtPrecio_Venta

			txtDescuento -> se escribe manual


			ALTER PROC Mostrar_Detalle_Venta
			@Id_Venta int
			as
			Select DV.Id_DetalleVenta, DV.Id_Venta, DV.Id_Producto, Pro.Nombre, DV.Cantidad, DV.Precio_Venta, 
			 (DV.Cantidad * DV.Precio_Venta) as 'Sub Total', DV.Descuento ,DV.Monto_Total
			FROM Detalle_Venta DV INNER JOIN Productos Pro 
			ON DV.Id_Producto=Pro.Id_Producto
			WHERE Id_Venta = @Id_Venta

			GO

			ALTER PROC Mostrar_Detalle_Reserva

			@Id_Reserva int 
			as 
			Select DR.Id_DetalleReserva, DR.Id_Reserva, DR.Id_Servicio, S.Nombre, DR.Cantidad_Disponible, DR.Cantidad_Usado, S.Precio_Venta,
			DR.Descuento, DR.Monto_Total
			From Detalle_Reserva DR INNER JOIN Servicio S 
			ON DR.Id_Servicio = S.Id_Servicio 
			WHERE Id_Reserva = @Id_Reserva 

			GO

			Alter PROC MostrarVentas
			as
			SELECT R.Id_Reserva, R.Id_Cliente,C.Nombre, R.Fecha_Reserva, R.Estado,  R.Descuento, R.Monto_Total,
			FROM Ventas V inner join Clientes C on V.Id_Cliente = C.Id_Cliente
			GO

			----------------------------------------------

			Paso 1 : Creamos las clases de Reservas en las 3 capas 

			Paso 2: Crear la pantalla de Reserva utilizando como plantilla FrmVentas

			Paso 3: Método para mostrar el procedimiento almacenado

			Paso 4: Creamos la pantalla de Agregar Reserva

			Paso 5: Creamos la pantalla de Clientes

			Paso 6: Mostramos los datos de clientes en esa pantalla

			Paso 7: Seleccionamos el cliente en la pantalla agregar reserva

			Paso 8: Creamos la pantalla de Servicios

			Paso 9: Seleccionamos el Servicio en la pantalla de agregar reserva

			Paso 10: Creamos el método para agregar datos al Data Grid

			Paso 11: Método para enviar los datos a la base de datos

			Paso X: Creamos Venta de Servicio y Creamos el Trigger para cambiar el estado de Pendiente a Finalizado


			----------------------------------------------

			txtId_Venta -> Ventas 

			txtId_Cliente -> Ventas

			txtClienteNombre 

			dtp_FechaVenta -> Ventas


			********************

			txtId_Venta -> Detalle Venta

			txtId_Producto -> Detalle VENTA

			txtCod_Producto

			txtNombre_Producto

			txtCantidad -> Detalle Venta

			txtStockActual

			txtPrecio_Venta -> Detalle Venta

			txtDescuento -> Detalle Venta 

			txtSubTotal -> Detalle Ventas

			txtDescuentoVenta -> Ventas

			txtMontoTotal -> Ventas

			Estado -> Por código 

			
			********************
			
			txtId_Reserva -> Detalle_Venta_Servicios

			txtId_Cliente -> Ventas_Servicios

			txtClienteNombre 
			
			txtFechaReserva -> Detalle_Venta_Servicios
			
			txtEstado -> Detalle_Venta_Servicios

			txtDescuento -> se ingresa
			
			txtMontoTotal1 -> de reservas

			txtId_Venta_Servicios -> Ventas_Servicios y  Detalle_Venta_Servicios

			dtp_FechaVenta -> Ventas_Servicios

			txtDescuentoVenta -> Detalle_Venta_Servicios y Ventas_Servicios

			txtMontoTotal -> Detalle_Venta_Servicios y Ventas_Servicios















































































































































































































































































































