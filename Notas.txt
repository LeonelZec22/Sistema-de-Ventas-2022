CornerRadius redondea las esquinas de la pantalla utilizando el paquete de iconos

Selecciona el objeto tipo window en apariencia pones allow transparent para tener la pantalla completa

Despues en windostartup lo pones en center

Cambiamos el color del windows 

Agregamos un rectangulo a este solo cambiamos su tamaño y sus bordes dejando solo una franja del windows

Creamos una figula con un rectangulo que girado es un rombo y en medio un circulo de otro color 

Content="Ver lista de &#xa; productos" -> para el salto de línea

 <Icon:PackIconMaterial Kind="Prod" Style="{StaticResource menuButtonIcon}"/>

  ------------------Formulario Principal-----------

 Nombre: FrmPrincipal

 StartPosition: CenterScreen 

 Text: Sistemas de ventas - 

 Windows State: Maximized 

 Nos falta la opción del XAML Dinamico al maximizar (Maximized) y nos falta los botones de cerrar, minimizar y maximizar

 private sqlconnection Conexion = new sqlconnection(configurationManager.ConnectionStrings["Conexion_DB"].ConnectionString);

  ------------------Conexion a la base de datos-----------

  Solo hemos modificado el archivo app.confi y creado la clase cd_conexion aunque en el archivo app.config da problemas y lo movimos todo a la clase creada

  En la clase CD_conexion es donde tu vas a agregar la conexion a la base de datos con autenticación de windows en el momento que está lista para 
  hacer el instalador vas a la empresa instalas el sql server y cambias la conexión haciendo un nuevo instalador

 Utilizamos la clase CD_Conexion para seguir con la conexión a la base de datos 

   ------------------Clase procedimientos en la capa datos -----------
   
   Solo creamos la clase cd_procedimientos.cs

    Donde creo cada uno de los métodos / funciones que me van a facilitar la programación como el método cargar datos para utilizarlo en cualquier formulario en un datagridview 

   Vamos a crear un método que me permite cargar los datos de una tabla a un datagridview

   donde pasare como parametro el nombre de la tabla 


   Métodos creado:

   - Cargar datos a la tabla
   - Cambiar el color de la fila 
   - Generar los códigos 
   - Generar los códigos de ID
   - Darle formato moneda
   - Limpiar controles
   - Llenar ComboBox


       ------------------Formulario Base y Formulario Productos-----------
   
   Seguiremos agregando métodos / funciones a la clase procedimiento pero ahora en la capa negocio (CDo_Procedimientos)
   Trabajaremos el formulario Productos para cargar nuestra tabla 

   Mandamos a llamar a cada uno de los métodos en un objeto nuevo para ser utilizados

 1) Agregamos un bóton cancelar con icono en la parte inferior derecha 

    x:Name="EditCancelarBtn"

 2)	En FormEditBase está el boton a copiar porque tiene el método clic para cerrar la pantalla y otros métodos virtuales
	Ahí está un método close que lo vamos a utilizar
	y otros métodos publicos virtuales que vamos a utilizar 

 3) Agregamos el formulario productos llamado FrmProductos 

 4)	Agregamoss el DataGrid 

 5) Agregamos estas propiedades al estilo de la tabla en el app.xaml 

	 <Setter Property="CanUserAddRows" Value="False"/>

	 <Setter Property="CanUserDeleteRows" Value="False"/>

	 <Setter Property="CanUserReorderColumns" Value="False"/>

	 <Setter Property="CanUserResizeRows" Value="False"/>

	 <Setter Property="CanUserResizeColumns" Value="True"/>

	 En el estilo del column header solo cambias el color de texto y el fondo ademas el tamaño de letra
	 en el estilo de la celda solo el tamaño de letra
	  
	Agrego el Read Only en true

 6)	Creamos el método para mostrar datos en la tabla 

	Tengo que cambiar los botones del menu lateral por otros y cambiar el ancho de la pantalla para hacerlos más grande y desactivar que se pueda mover 
	ademas de minimizar y cerrar además conectarlo con otras pantallas y tambien tenemos que ver como hacer datagrid ui más estilizado

	Importamos la capa negocio y la capa entidad 

	No vamos a utilizar las clases procedimientos solo vamos a copiar ese código cuando lo necesitemos

	hemos creado el método cargaDatos y en la pantalla principal al hacer clic en productos se abre el formulario de productos

	Creamos un objeto de la clase CDo_Procedimiento para utilizar el método cargar datos 

	CDo_Procedimientos Procedimientos = new CDo_Procedimientos();

	DataGrid.DataSource = Procedimientos.CargarDatos("Productos")

7) Conectamos la pantalla principal con la pantalla productos 

	 ------------------Formulario Inventario-----------

	 Los formularios de editar y agregar no deben de maximizarse 

	 Tenemos que ocultar la columna id cuando es un datagrid con columnas dinamicas

	 Creamos el formulario principal de inventarios

	 Me llevo todo del formulario Productos

	 Cambiamos los nombres del x:name de los elementos y eliminamos los botones porque solo necesitamos mostrar los datos en la tabla

	 que no se te olvide agregarle este evento: Border_MouseLeftButtonDown

	 Una vez teniendo ya el formulario de inventario terminados pasamos al código

	 en el código me robo todas las referencias o librerias de la clase productos a la clase inventario

	 me llevo el método carga datos cambiamos el nombre de la tabla de productos a inventario y cambios el nombre del datagrid por el de inventario

	 procedemos a conectar la pantalla principal del sistema con la pantalla de inventario