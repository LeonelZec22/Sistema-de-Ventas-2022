CornerRadius redondea las esquinas de la pantalla utilizando el paquete de iconos

Selecciona el objeto tipo window en apariencia pones allow transparent para tener la pantalla completa

Despues en windostartup lo pones en center

Cambiamos el color del windows 

Agregamos un rectangulo a este solo cambiamos su tamaño y sus bordes dejando solo una franja del windows

Creamos una figula con un rectangulo que girado es un rombo y en medio un circulo de otro color 

Content="Ver lista de &#xa; productos" -> para el salto de línea

 <Icon:PackIconMaterial Kind="Prod" Style="{StaticResource menuButtonIcon}"/>

  ------------------Formulario Principal-----------

 Nombre: FrmPrincipal

 StartPosition: CenterScreen 

 Text: Sistemas de ventas - 

 Windows State: Maximized 

 Nos falta la opción del XAML Dinamico al maximizar (Maximized) y nos falta los botones de cerrar, minimizar y maximizar

 private sqlconnection Conexion = new sqlconnection(configurationManager.ConnectionStrings["Conexion_DB"].ConnectionString);

  ------------------Conexion a la base de datos-----------

  Solo hemos modificado el archivo app.confi y creado la clase cd_conexion aunque en el archivo app.config da problemas y lo movimos todo a la clase creada

  En la clase CD_conexion es donde tu vas a agregar la conexion a la base de datos con autenticación de windows en el momento que está lista para 
  hacer el instalador vas a la empresa instalas el sql server y cambias la conexión haciendo un nuevo instalador

 Utilizamos la clase CD_Conexion para seguir con la conexión a la base de datos 

   ------------------Clase procedimientos en la capa datos -----------
   
   Solo creamos la clase cd_procedimientos.cs

    Donde creo cada uno de los métodos / funciones que me van a facilitar la programación como el método cargar datos para utilizarlo en cualquier formulario en un datagridview 

   Vamos a crear un método que me permite cargar los datos de una tabla a un datagridview

   donde pasare como parametro el nombre de la tabla 


   Métodos creado:

   - Cargar datos a la tabla
   - Cambiar el color de la fila 
   - Generar los códigos 
   - Generar los códigos de ID
   - Darle formato moneda
   - Limpiar controles
   - Llenar ComboBox


       ------------------Formulario Base y Formulario Productos-----------
   
   Seguiremos agregando métodos / funciones a la clase procedimiento pero ahora en la capa negocio (CDo_Procedimientos)
   Trabajaremos el formulario Productos para cargar nuestra tabla 

   Mandamos a llamar a cada uno de los métodos en un objeto nuevo para ser utilizados

 1) Agregamos un bóton cancelar con icono en la parte inferior derecha 

    x:Name="EditCancelarBtn"

 2)	En FormEditBase está el boton a copiar porque tiene el método clic para cerrar la pantalla y otros métodos virtuales
	Ahí está un método close que lo vamos a utilizar
	y otros métodos publicos virtuales que vamos a utilizar 

 3) Agregamos el formulario productos llamado FrmProductos 

 4)	Agregamoss el DataGrid 

 5) Agregamos estas propiedades al estilo de la tabla en el app.xaml 

	 <Setter Property="CanUserAddRows" Value="False"/>

	 <Setter Property="CanUserDeleteRows" Value="False"/>

	 <Setter Property="CanUserReorderColumns" Value="False"/>

	 <Setter Property="CanUserResizeRows" Value="False"/>

	 <Setter Property="CanUserResizeColumns" Value="True"/>

	 En el estilo del column header solo cambias el color de texto y el fondo ademas el tamaño de letra
	 en el estilo de la celda solo el tamaño de letra
	  
	Agrego el Read Only en true

 6)	Creamos el método para mostrar datos en la tabla 

	Tengo que cambiar los botones del menu lateral por otros y cambiar el ancho de la pantalla para hacerlos más grande y desactivar que se pueda mover 
	ademas de minimizar y cerrar además conectarlo con otras pantallas y tambien tenemos que ver como hacer datagrid ui más estilizado

	Importamos la capa negocio y la capa entidad 

	No vamos a utilizar las clases procedimientos solo vamos a copiar ese código cuando lo necesitemos

	hemos creado el método cargaDatos y en la pantalla principal al hacer clic en productos se abre el formulario de productos

	Creamos un objeto de la clase CDo_Procedimiento para utilizar el método cargar datos 

	CDo_Procedimientos Procedimientos = new CDo_Procedimientos();

	DataGrid.DataSource = Procedimientos.CargarDatos("Productos")

7) Conectamos la pantalla principal con la pantalla productos 

	 ------------------Formulario Inventario-----------

	 Los formularios de editar y agregar no deben de maximizarse 

	 Tenemos que ocultar la columna id cuando es un datagrid con columnas dinamicas

	 Creamos el formulario principal de inventarios

	 Me llevo todo del formulario Productos

	 Cambiamos los nombres del x:name de los elementos y eliminamos los botones porque solo necesitamos mostrar los datos en la tabla

	 que no se te olvide agregarle este evento: Border_MouseLeftButtonDown

	 Una vez teniendo ya el formulario de inventario terminados pasamos al código

	 en el código me robo todas las referencias o librerias de la clase productos a la clase inventario

	 me llevo el método carga datos cambiamos el nombre de la tabla de productos a inventario y cambios el nombre del datagrid por el de inventario

	 procedemos a conectar la pantalla principal del sistema con la pantalla de inventario


	 ------------------Formulario Agregar Producto-----------
	 
	 Al textBox de monto total del inventario le quitamos el isEnabled para que sea solo de lectura y no se pueda escribir en él
	 además hemos hechos modificaciones al buscador que está en inventario y en productos

	 Creamos un método para calcular el monto total del inventario es decir sumamos toda la columna de monto total

	 Ocultamos un columna auto generica con el evento AutoGeneratingColumn asi ocultamos la columna ID esto en el formulario inventario y de productos

	 Vamos a la capa entidad y creamos la clase CE_Productos

	 Creamos los atributos que corresponde a los campos de la tabla productos 
	 Creamos los métodos get y set de esos campos 

	 En la capa datos creamos la clase CD_Productos en esa clase es que vamos a crear el método para agregar un producto a la base de datos

	 como parametro creo una instancia de la clase CE_Productos

	 Creamos los métodos agregar, editar y eliminar productos 

	 En la capa de negocios creamos la clase CDo_Productos en está clase creamos más métodos para agregar, editar y eliminar

	 Agregamos nuestro formulario - Agregar productos 

	 Copiamos todo lo de formulario Agregar Base copiamos ese código

	 Ya lo tenemos ahora los vamos a modificar un poquito para definir los campos recuerda quitar el evento mousedown heredado

	 Para cada pantalla editar, agregar y eliminar si podriamos cambiar el color y los iconos 

	 Agregamos el método close al boton cancelar del formulario agregar productos 

	Creamos una instancia de la pantalla productos desde el formulario agrega productos para cuando se agregue un producto  se actualice el datagrid 

	Creamos un evento para poder refrescar la pantalla de productos una vez agregamos un productos desde la pantalla agregar productos

	En la caja texto de código activamos el readonly y la desactivamos

	los textbox tienen el evento keydown y el evento leave 

	Evento para cambiar al siguiente textbox presionando la tecla enter usando el evento keydown

	tuvimos que agregar la referencia de PresentationFramework a la capa de datos para despues poder cambiar el parametro del método formato moneda de 
	form.textbox a controls.textbox pero como es una referencia ambigueda queda de la siguiente forma System.Windows.Controls.TextBox 

	entonces en las 4 capas tiene que estar la referencia a la presentationframework después en los métodos hay que poner la ruta completa del control como
	parametro porque si no surge el problema de ambiguedad que es que no sabe visual studio si es un textbox de tipo form o de tipo control y eso lo cambias en todos los métodos para que espere recibir un textbox de tipo control (wpf) y no uno de tipo form (winform)

	Ahora agregamos el método virtual agregar

	 ------------------ Correciones del menu lateral del Formulario Agregar Producto-----------

	 Creamos un control de usuario llamado Modulos en la carpeta Menu

	 Despues Pegas el estilo de menu lateral en el App.xaml 

	 Despues abrimos la clase de Modulos.cs para pegar los métodos

	 Despues abrimos el modulo.xaml para crear los elementos 

	 Ahora compilamos la solución

	 Creamos los elementos en el Productos.xaml

	 Resumen solo Creamos el control de usuarios, agregamos más imagenes, agregamos más estilos al App.xaml, modificamos la pantalla de productos principal

	 Ahora copiamos esa parte en el Invertario.xaml

	 No se te olvide agregar la referencia xmlns:uc="clr-namespace:CapaPresentacion.Menu"

	 Ahora en la pantalla de Productos y de Inventario tenemos que agregar el evento clic para conectar las pantallas

	  <Button Grid.Column="1" Background="Transparent" Style="{StaticResource BotonesMenu}"> </Button>

	   ------------------  (Formulario Editar Producto) -----------

	 Creamos una nueva pantalla llamada FrmEditarProducto

	 Ahora reutilizamos el código

	  Agregar el evento selection changed en el datagrid 


	   ------------------  (Eliminar Producto) -----------

	   Nos vamos a CD_Productos

	   Ceeamoes el metodo eliminar que despues mandamos llamar a en el formulario productos

	   Ahora nos vamos al formulario productos 

	   El inventario no lo actualiza cuando le doy a editar producto ni lo elimina cuando elimino un producto desde productos hay algo mal con los triggers
	   pero como ese modulo no toca esta semana pues lo vemos más adelante 

	   hay un problema con el id producto y inventario fijate que cuando lo agregas

	   cuando lo vas a agregar no pones el id ni como parametro @ ni dentro de insert into porque eso ya se agrega automaticamente cuando es identity

	   cuando vas a editar el producto si pones el parametro id pero vas usarlo dentro del where Id_Producto=@Id_Producto;

	   
	   La solución agregar el campo id_producto a la tabla inventario y dejar de hacer cosas raras 

	   si agregamos esa columna eliminanos el id_inventario de los trigger y lo cambiamos por @Id_Productos 

	   creas otras base de datos y puebas estos cambios



	    ------------------ Buscar productos por Código, Nombre y Descripción   ------------------

		Abrimos CD_Productos

		Creamos los métodos para buscar productos

		Abrimos la capa negocios y abrimos la clase cdo_productos

		Creamos los métodos buscar

		podemos usar el evento clic o el evento textchanged 

		------------------------------ Gestión de Proveedores -----------------------------------

		Vamos a la capa entidad y creamos la clase CE_Proveedores

		Creamos los método get y set de todos los campos que conforman la tabla proveedores

		Nos vamos a la capa datos y creamos una clase llamada CD_Proveedores
		Pegamos todo el código de la clase CD_Productos en la clase CD_Proveedores y modificamos las referencias 
		
		Vamos a la capa de negocio y creamos la clase CDo_Proveedores

		Vamos a crear el formulario de proveedores 

		Como siempre agregamos las referencias del formulario productos al de proveedores

		Copio el codigo y renombro los elementos x:name 

		Ahora agrego el método cargadatos y cambio la tabla de productos a proveedores

		Agrego el Evento para ocultar una columna id de un datagrid autogenerico

		------------------------------ Agregar Proveedor ------------------------------

		Creamos un nuevo formulario 

		Copiamos el código del formulario AgregarProductos 

		Cambiamos los nombres de xname y los eventos

		Puedes cambiar los colores y el icono

		Agregamos las referencias 

		Copiamos los métodos del formulario Agregar Producto

		Nos falta validar con Expresiones regulares regex el campo de telefono y bloquear las teclas de texto para que solo pueda escribir numeros 


		
		------------------------------ Editar Proveedor ------------------------------

		Agregamos un nuevo formulario

		Copiamos el código de AgregarProveedor al editarproveedor cambiamos los nombre x:name 

		Agregamos el textbox para el id pero de manera oculta 

		Ahora en la clase EditarProveedor creamos el método para editar el proveedor

		Ahora seguimos con la clase del formulario Proveedor


		------------------------------ Gestión de Clientes ------------------------------

		Creamos la clase CE_Clientes en la capa entidad

		Creamos las variables o atributos de la clase en base a las columnas de la tabla cliente

		Id_Cliente

		Codigo

		Nombre

		Telefono

		Email

		Estado

		Creamos la clase CD_Clientes en la capa datos

		Abrimos la clase CD_Proveedores

		Copiamos las librerias

		Copiamos todo el codigo 

		Sustituimos los nombres 

		Creamos la clase CDo_Clientes en la capa negocio

		Copiamos las librerias de de CDo_Proveedor

		Copiamos el codigo de CDo_Proveedor

		Sustituimos los nombres de los métodos y las variables

		Agregamos una nueva pantalla llamada FrmClientes

		Abrimos el formulario principal de proveedores 

		Copiamos sus librerias y las pegamos en FrmClientes

		Copiamos todo el código 

		Renombramos los elementos

		Abrimos la clase de ese formulario clientes

		Abrimos la clase del formulario proveedores

		Copiamos las librerias del formulario proveedor

		Copiamos el código y modificamos los nombres


		------------------------------ Agregar Clientes ------------------------------

		Creamos el formulario Agregar Cliente

		Copias el codigo de Agregar Proveedores

		Ahora abre la clase de Agregar Proveedore

		Abre la clase de Agregar Clientes

		Tenemos que hacer una modificación en la base de datos en el campo nombre y que acepte 20 caracteres

		Usar expresiones regulares para que el campo nombre tiene que ir como minimo 1 nombre y 1 apellido es decir 10 caracteres
		Expresiones regulares para telefono y email

		Activo -> Reserva activa o paquete activo cuando se haya cumplido la reserva pasa a inactivo o cumplido todo el paquete

		------------------------------ Editar Clientes ------------------------------

		Creamos el formulario editar 

		Abrimos el formulario Agregar Cliente

		Copiamos el código 
		
		Modificamos los nombres

		Vamos a editar proveedores y copiamos la caja editar id

		Abrimos la clase agregar clientes 
		
		Copiamos una parte del código y modificamos los nombres en la clase editar clientes

		Abrimos la clase de proveedores 

		Abrimos la pantalla de clientes

		Abrimos la clase de clientes

		------------------------------ Eliminar Clientes ------------------------------


		Abrimos el fomulario de clientes 

		Abrimos la clase del formulario

		Abrimos la clase del formulario proveedor 

		Copiamos el método eliminar

		------------------------------ Buscador de Clientes ------------------------------


		Abrimos el formulario de proveedor 
		
		Abrimos la clase de proveedores 

		Copiamos el método buscar

		Cambiamos los nombres

		------------------------------ Clases del Modulo Gestión de Compras ------------------------------
		
		En la capa entidad creo la clase CE_Ingreso_Productos

		Creamos los atributos y los métodos get y set

		En la capa entidad creo la clase CE_Detalle_Ingreso

		Creamos los atributos y los métodos get y set

		En la capa datos creo la clase CD_Ingreso_Productos

		Creamos los métodos para agregar el ingreso de un producto
		Creamos los métodos para anular o cancelar el ingreso de un producto
		Creamos los métodos para mostrar el ingreso de un producto en una tabla

		En la capa datos creo la clase CD_Detalle_Ingreso

		Más que imprimir una factura podemos imprimir un resumen o exportar a excel un resumen de todo los productos ingresados que hay actualmente 

		Creamos los métodos para agregar el ingreso del detalle de un producto
		Creamos los métodos para anular o cancelar el ingreso del detalle de un producto

		En la capa negocios creo la clase CDo_Ingreso_Productos

		En la capa negocios creo la clase CDo_Detalle_Ingreso

		------------------------------ Formulario Compras y Vista Proveedores ------------------------------

		Creamos una nueva pantalla FrmCompraDeProducto porque cada vez nosotros recibimos un producto que hemos comprado hay que registrarlo 
		para tener un informe de este día se compro este producto o se recibio este producto 

		Abrimos el formulario de Clientes y copiamos sus referencias en CompraDeProducto porque para crear el método cargaDatos vamos a hacer algo a BuscarClientes 
		donde "  DataGridClientes.ItemsSource = Clientes.Buscar_Cliente_Codigo(Cliente).AsDataView(); " se sustituye los nombres 

		Utilizamos el evento para ocultar el nombre de una columna

		Creamos una nueva pantalla FrmVistaProveedores 

		Abrimos el formulario Proveedores 

		Copiamos el formulario y lo pegamos en VistaProveedores

		Abrimos la clase del formulario proveedores

		Copiamos las librerias y las pegamos 

		------------------------------  Formulario Agregar Ingreso Producto ------------------------------ 

		Creamos un formulario

		Despues en la clase de AgregarIngreso agregamos la libreria

























































































































































































